version: '3'

services:
  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_PASSWORD=testpassword
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 15s
      timeout: 5s
      retries: 5
    ports:
      - 5432:5432
    container_name: postgresql

  backend:
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             gunicorn --bind 0.0.0.0:8000 backend.wsgi"
    depends_on:
      postgres:
        condition: service_healthy
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - static_volume:/vol/web
      - ./backend/media:/backend/media
    expose:
      - 8000
    container_name: django_backend

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - frontend_volume:/frontend/build
    develop:
      watch:
        - action: rebuild
          path: ./frontend
          target : /frontend
    container_name: react_frontend

  nginx:
    image: nginx
    depends_on:
      - backend
    volumes:
      - static_volume:/vol/static
      - frontend_volume:/usr/share/nginx/frontend
      - ./nginx/conf.d:/etc/nginx/conf.d
    ports:
      - 80:80
    container_name: nginx

  redis:
    image: redis:latest
    restart: always
    expose:
      - 6379
    container_name: redis

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A backend worker --loglevel=INFO
    volumes:
      - .:/usr/src/app
    depends_on:
      - backend
      - redis
    container_name: celery_worker
    
volumes:
  static_volume:
  frontend_volume:
